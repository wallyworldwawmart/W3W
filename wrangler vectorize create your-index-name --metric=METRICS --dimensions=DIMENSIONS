export interface Env {
    // This makes our vector index methods available on env.MY_VECTOR_INDEX.*
    VECTORIZE_INDEX: VectorizeIndex;
  }
  
  // Sample vectors: 3 dimensions wide.
  //
  // Vectors from a machine-learning model are typically ~100 to 1536 dimensions
  // wide (or wider still).
  const sampleVectors: Array<VectorizeVector> = [
    { id: '1', values: [32.4, 74.1, 3.2] },
    { id: '2', values: [15.1, 19.2, 15.8] },
    { id: '3', values: [0.16, 1.2, 3.8] },
    { id: '4', values: [75.1, 67.1, 29.9] },
    { id: '5', values: [58.8, 6.7, 3.4] },
  ];
  
  export default {
    async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
      // Insert some sample vectors into our index.
      // In a real application, these vectors would be the output of a machine learning (ML) model,
      // such as Workers AI, OpenAI, or Cohere.
      let inserted = await env.VECTORIZE_INDEX.insert(sampleVectors);
    
      // In our example, we're going to construct a simple vector that should
      // match vector id #5
      let queryVector: Array<number> = [54.8, 5.5, 3.1];
  
      // Query our index and return the three (topK = 3) most similar vector
      // IDs with their similarity score.
      let matches = await env.VECTORIZE_INDEX.query(queryVector, { topK: 3, returnVectors: true });
  
      return Response.json({matches: matches});
    },
  };
